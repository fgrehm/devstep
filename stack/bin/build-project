#!/usr/bin/env bash
# usage: build-project <build-dir> <cache-dir> -b <buildpack> -b <buildpack>
set -eo pipefail

if [ "${DEVSTEP_LOG}" = 'debug' ]; then
  set -x
fi

usage() {
  cat <<EOF
Usage:
build-project <build-dir> <cache-dir> -b <buildpack> -b <buildpack>
EOF
  return 0
}

options=$(getopt -o h,b: -- "$@")

if [ $? -ne 0 ]; then
    usage
    exit 1
fi

eval set -- "$options"

# This is pretty hacky but werks
FORCED_BUILDPACKS=""
declare -a buildpacks
while :; do
    case "$1" in
        -h|--help)  usage && exit 1;;
        -b)         buildpacks+=("${2}"); FORCED_BUILDPACKS='1'; shift 2;;
        *)          shift 1 && break;;
    esac
done

export FORCED_BUILDPACKS

project_root=${1:-`pwd`}
cache_root=${2:-"${HOME}/cache"}
buildpack_root=/opt/devstep/buildpacks

if [ "${project_root}" = '/' ]; then
  echo "Can't build root dir!"
  exit 1
fi

mkdir -p $project_root
mkdir -p $cache_root
mkdir -p $buildpack_root
mkdir -p ${HOME}/.profile.d

function output_redirect() {
	if [[ "$slug_file" == "-" ]]; then
		cat - 1>&2
	else
		cat -
	fi
}

function echo_title() {
  echo $'\e[1G----->' $* | output_redirect
}

function echo_normal() {
  echo $'\e[1G      ' $* | output_redirect
}

function ensure_indent() {
  while read line; do
    if [[ "$line" == --* ]]; then
      echo $'\e[1G'$line | output_redirect
    else
      echo $'\e[1G      ' "$line" | output_redirect
    fi
  done
}

# In heroku, there are two separate directories, and some
# buildpacks expect that.
# TODO: Figure out if this is needed
# cp -r $project_dir/. $build_root

## Buildpack fixes

export REQUEST_ID=$(openssl rand -base64 32 2>/dev/null)
export APP_DIR="$project_root"
# export HOME="$project_root"

## Fix directory permissions

(cd $project_root && /opt/devstep/bin/fix-permissions)

## Buildpack detection

declare -a selected_buildpacks
if [[ -z "${buildpacks[@]}" ]]; then
  buildpacks=($buildpack_root/*)
  for buildpack in "${buildpacks[@]}"; do
    if $($buildpack/bin/detect "${project_root}" &>/dev/null); then
      selected_buildpacks+=($buildpack)
    fi
  done
else
  for buildpack in "${buildpacks[@]}"; do
    selected_buildpacks+=(${buildpack_root}/${buildpack})
  done
fi

## Compile!

if [[ -n "${selected_buildpacks[@]}" ]]; then
  # TODO: This output is not needed if a single buildpack was detected
  echo_title "Building project at '${project_root}' with the following buildpacks:"
  for bp in "${selected_buildpacks[@]}"; do
    echo "- $bp" | ensure_indent
  done
else
  echo_title "Unable to identify a buildpack for the workspace!"
  exit 0
fi

# HACK to "move" inline buildpack to the end of the list (very hacky but works)
inline_path=
for bp in "${selected_buildpacks[@]}"; do
  if $(echo $bp | grep -q 'inline'); then
    inline_path="$bp"
    continue
  fi
  echo_title "Building with $bp"
  $bp/bin/compile "$project_root" "$cache_root" | ensure_indent
done

if [[ -n "$inline_path" ]]; then
  echo_title "Building with $inline_path"
  $inline_path/bin/compile "$project_root" "$cache_root" | ensure_indent
fi

echo_title "Build finished successfully!"

## Let the user know a reload is needed
if [ "${FORCED_BUILDPACKS}" = '1' ]; then
  echo "********************************************************************************"
  echo "* HEADS UP: Your environment is likely to have changed, please run \`reload-env'"
fi

## Save on disk space if wanted
if [ "${CLEANUP}" = '1' ]; then
  echo '-----> Cleaning up...'

  echo "       Running 'sudo rm -rf $cache_root/*'"
  sudo rm -rf $cache_root/*

  echo "       Running 'sudo rm -rf tmp/*'"
  sudo rm -rf /tmp/*
fi
