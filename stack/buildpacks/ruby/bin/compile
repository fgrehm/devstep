#!/usr/bin/env bash

set -e

GEMFILE_PATH=$1/Gemfile
GEMFILE_LOCK_PATH=$1/Gemfile.lock
RUBY_VERSION_PATH=$1/.ruby-version

# From https://github.com/aripollak/rbenv-bundler-ruby-version/blob/32bd1a63ed57c6fcfbd4f3766fed64fad21b61b0/bin/rbenv-bundler-ruby-version#L24-L33
version_from_gemfile() {
  if [ -f ${GEMFILE_PATH} ]; then
    # handles simple ruby statements, as well as engine and engine_version,
    # with single or double quotes and in either order
    grep '^\s*ruby' "$GEMFILE_PATH" | sed -e 's/\s*#.*//' -e 's/engine:/:engine =>/' \
          -e 's/engine_version:/:engine_version =>/' \
          -e "s/.*:engine\s*=>\s*['\"]\([^'\"]*\).*:engine_version\s*=>\s*['\"]\([^'\"]*\).*/\1-\2/" \
          -e "s/.*:engine_version\s*=>\s*['\"]\([^'\"]*\).*:engine\s*=>\s*['\"]\([^'\"]*\).*/\2-\1/" \
          -e "s/^\s*ruby\s*['\"]\([^'\"]*\).*/\1/" | head -1
  fi
}

version_from_ruby_version() {
  if [ -f ${RUBY_VERSION_PATH} ]; then
    cat $RUBY_VERSION_PATH
  fi
}

bundler_version_from_gemfile_lock() {
  if [ -f ${GEMFILE_LOCK_PATH} ]; then
    grep -Pzo "BUNDLED WITH\s+([0-9.])+" $GEMFILE_LOCK_PATH | tail -n 1 | tr -d '[[:space:]]'
  fi
}

download_ruby() {
  cache=$1
  stack=$2
  version="ruby-${3}"

  mkdir -p $cache/rubies

  tarball_path=${cache}/rubies/${stack}-${version}.tgz
  if ! [ -f $tarball_path ]; then
    echo "       Downloading and installing ${version} (${stack})..." 1>&2
    ruby_url="https://s3-external-1.amazonaws.com/heroku-buildpack-ruby/${stack}/${version}.tgz"
    curl -L -s $ruby_url > $tarball_path
  else
    echo "       Installing previously downloaded ${version} (${stack})..." 1>&2
  fi
  echo $tarball_path
}

install_ruby() {
  tarball_path=$(download_ruby $1 'cedar-14' $DEVSTEP_RUBY_VERSION)

  mkdir -p $HOME/ruby
  # TODO: Verify if the tarball is a proper tarball, if not, try using the cedar ruby instead of cedar14, but raise a warning
  #       document the behavior on docs
  tar xfz $tarball_path -C $HOME/ruby &>/dev/null || {
    rm -f $tarball_path
    echo "WARNING: ${DEVSTEP_RUBY_VERSION} is not available for Heroku's Cedar 14 stack, attempting to use the Cedar stack Ruby." 1>&2

    # TODO: Some debug logging
    #echo "Unable to install Ruby $DEVSTEP_RUBY_VERSION from Heroku's Cedar stack"
    #echo "Trying to use cedar stack"

    tarball_path=$(download_ruby $1 'cedar' $DEVSTEP_RUBY_VERSION)
    tar xfz $tarball_path -C $HOME/ruby &>/dev/null || {
      rm -f $tarball_path
      # TODO: Some debug logging
      #echo "Unable to download $DEVSTEP_RUBY_VERSION"
      #echo "Failing"
      return 1
    }
  }

  mkdir -p ${HOME}/.profile.d
  echo 'export PATH="$HOME/ruby/bin:$PATH"' > $HOME/.profile.d/ruby.sh

  return 0
}

requires_phantomjs() {
  return $(grep -q 'poltergeist' $1/Gemfile*)
}

install_phantomjs() {
  /opt/devstep/buildpacks/phantomjs/bin/compile $1 $2
}

# TODO: Look into travis.yml as well
DEVSTEP_RUBY_VERSION=${DEVSTEP_RUBY_VERSION:-$(version_from_ruby_version)}
DEVSTEP_RUBY_VERSION=${DEVSTEP_RUBY_VERSION:-$(version_from_gemfile)}
if [ -z "$DEVSTEP_RUBY_VERSION" ]; then
  DEVSTEP_RUBY_VERSION='2.3.0'
  echo "Unable to identify the project ruby version, setting to ${DEVSTEP_RUBY_VERSION}"
fi

if [ -d ${HOME}/ruby ]; then
  echo 'Ruby already installed, skipping'
else
  # Step away from project sources to avoid loading .ruby-version and .ruby-gemset files
  pushd / &>/dev/null
  install_ruby $2 || {
    echo 'Error installing ruby!'
    tail /tmp/build.log
    exit 1
  }
  popd &>/dev/null
  # Create this dir from here as we might want to bind mount ~/.gem/credentials
  # from the host
  sudo mkdir -p $HOME/.gem/specs
  sudo chown -R developer: $HOME/.gem
  cat <<-GEMRC > $HOME/.gemrc
---
gem: --no-ri --no-rdoc
GEMRC

  # Use system libraries when installing nokogiri
  mkdir -p "${HOME}/.bundle"
  cat <<-STR > $HOME/.bundle/config
---
BUNDLE_BUILD__NOKOGIRI: "--use-system-libraries"
STR
fi

source ${HOME}/.profile.d/ruby.sh

DEVSTEP_BUNDLER_VERSION=${DEVSTEP_BUNDLER_VERSION:-$(bundler_version_from_gemfile_lock)}
DEVSTEP_BUNDLER_VERSION=${DEVSTEP_BUNDLER_VERSION:-'1.11.2'}

if ! $(which bundle &> /dev/null); then
  tarball_path=$2/rubies/bundler-${DEVSTEP_BUNDLER_VERSION}.gem
  if ! [ -f $tarball_path ]; then
    echo "Downloading and installing bundler ${DEVSTEP_BUNDLER_VERSION}..."
    bundler_url="https://rubygems.org/downloads/bundler-${DEVSTEP_BUNDLER_VERSION}.gem"
    curl -L -s $bundler_url > $tarball_path
  else
    echo "Installing previously downloaded bundler ${DEVSTEP_BUNDLER_VERSION}..."
  fi
  gem install $tarball_path
fi

# If there's no Gemfile in place, our work here is done
if ! [ -f $GEMFILE_PATH ]; then
  exit 0
fi

mkdir -p "$2/gem-cache"
gem_cache="$(gem env gemdir)/cache"
# Check if gem cache link is broken
if [ -L $gem_cache ] && ! [ -e $gem_cache ]; then
  unlink $gem_cache
fi
if ! [ -L $gem_cache ]; then
  rm -rf $gem_cache
  ln -s "$2/gem-cache" $gem_cache
fi

echo "Installing gems using bundler '$(bundle -v | cut -d' ' -f 3)'..."
(cd $1 && bundle install --jobs=4)

if requires_phantomjs $1; then
  if [ -d ${HOME}/phantomjs ]; then
    echo '-----> PhantomJS already installed, skipping'
  else
    install_phantomjs $1 $2
  fi
fi
