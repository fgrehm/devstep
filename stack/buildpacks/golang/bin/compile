#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

# This is a modified version of https://github.com/kr/heroku-buildpack-go/blob/master/bin/compile

set -eo pipefail

# So that jq works
export PATH="/opt/devstep/bin:$PATH"

# Go releases for Darwin beginning with 1.2rc1
# have included more than one build, depending
# on the specific version of Mac OS X. Try to
# account for that, but don't try too hard.
# This doesn't affect Heroku builds, it's only
# for testing on Darwin systems.
platext() {
    case $1 in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*) return ;;
    esac
    case $(uname|tr A-Z a-z) in
    darwin) printf %s -osx10.8 ;;
    esac
}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo http://go.googlecode.com/files/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

# mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
# cache=$(cd "$2/" && pwd)
cache=$(cd "$2/" && pwd)/golang
mkdir -p "$build" "$cache"
# buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
# venv=$cache/venv
# mkdir -p $cache/pip
# python=python2.7
# PATH=$buildpack/$plat/bin:$venv/bin:$PATH

# virtualenv() {
#     python "$buildpack/vendor/virtualenv-1.11.6/virtualenv.py" "$@"
# }

if test -f $build/Godeps
then
    name=$(<$build/Godeps jq -r .ImportPath)
    ver=$(<$build/Godeps jq -r .GoVersion)
elif test -d $build/Godeps
then
    name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
elif test -f $build/.godir
then
    name=$(cat $build/.godir)
elif test -d $build/.git
then
    pushd $build &> /dev/null
    # REFACTOR: I'm pretty sure this can be cleaned up
    name=$(git config --get-regexp '^remote.+\.url' | grep github | head -n1 | cut -f2 -d' ' | sed 's/^\(git\|https\):\/\///' | sed 's/^\w\+@//' | sed 's/:/\//' | sed 's/\.git$//' || echo -n '')
    popd &> /dev/null
fi
ver=${ver:-go${GOVERSION:-1.6}}

file=${GOFILE:-$ver.$(uname|tr A-Z a-z)-amd64$(platext $ver).tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

# if test -e $build/bin && ! test -d $build/bin
# then
#     echo >&2 " !     File bin exists and is not a directory."
#     exit 1
# fi

# if test -d $cache/$ver/go
if test -d $HOME/go
then
    # echo "-----> Using $ver"
    echo "-----> Using $(${HOME}/go/bin/go version)"
else
    # rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
    # echo -n "-----> Installing $ver..."
    # curl -sO $url
    # tar zxf $file
    # rm -f $file
    if test -f $cache/$ver/$file; then
      echo "-----> Using $ver"
    else
      echo "-----> Downloading ${ver}..."
      curl -sLO $url
      echo "done"
    fi
    tar zxf $file -C ${HOME}
    echo " done"
    cd - >/dev/null
fi

# mkdir -p $build/bin
# GOBIN=$build/bin export GOBIN
# GOROOT=$cache/$ver/go export GOROOT
GOROOT=${HOME}/go export GOROOT
# GOPATH=$build/.heroku/go export GOPATH
GOPATH=${HOME}/gocode export GOPATH
# PATH=$GOROOT/bin:$PATH
GOBIN=$GOPATH/bin export GOBIN
PATH=$GOBIN:$GOROOT/bin:$PATH export PATH


# if ! (test -d $build/Godeps || (which hg >/dev/null && which bzr >/dev/null))
# then
#     echo
#     echo "       Tired of waiting for bzr and hg?"
#     echo "       Try github.com/kr/godep for faster deploys."
#     echo
#
#     echo -n "       Installing Virtualenv..."
#     virtualenv --python $python --distribute --never-download --prompt='(venv) ' $venv > /dev/null 2>&1
#     . $venv/bin/activate > /dev/null 2>&1
#     echo " done"
#
#     echo -n "       Installing Mercurial..."
#     pip install mercurial > /dev/null 2>&1
#     echo " done"
#
#     echo -n "       Installing Bazaar..."
#     pip install bzr > /dev/null 2>&1
#     echo " done"
# fi
heroku_buildpack_bin='https://github.com/kr/heroku-buildpack-go/raw/master/linux-amd64/bin'
target="${HOME}/bin"
if [ -f $build/Godeps ] || [ -d $build/Godeps ]; then
  if ! [ -f ${target}/godep ]; then
    echo "-----> Installing godep to ${target}..."
    if ! [ -f ${cache}/godep ]; then
      curl -L -s ${heroku_buildpack_bin}/godep > ${cache}/godep
    fi
    cp ${cache}/godep ${target}/godep
    chmod +x ${target}/godep
    echo ' done'
  else
    echo "-----> Using ${target}/godep"
  fi
fi
PATH=$target:$PATH

p=$GOPATH/src/$name
# mkdir -p $p
# cp -R $build/* $p

# Default to $SOURCE_VERSION environment variable
GO_LINKER_VALUE=${SOURCE_VERSION}

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
# env_dir="$3"
# if [ -d "$env_dir" ]
# then
#     ln -sfn $build /app/code
#   for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE
#     do
#         if [ -f "$env_dir/$key" ]
#         then
#             export "$key=$(cat "$env_dir/$key")"
#         fi
#     done
# fi

if [ -d $GOPATH ]; then
  sudo chown developer:developer $GOPATH
  if [ -d $GOPATH/src ]; then
    sudo chown developer:developer $GOPATH/src
    for dir in $GOPATH/src/*; do
      sudo chown developer:developer $dir
    done
    for dir in $GOPATH/src/**/*; do
      sudo chown developer:developer $dir
    done
  fi
else
  mkdir -p $GOBIN
  mkdir -p $GOPATH
fi
if ! [ -f ${HOME}/.profile.d/go.sh ]; then
  echo "-----> Configuring ${ver}..."
  echo "export GOPATH=$GOPATH" > ${HOME}/.profile.d/go.sh
  echo "export GOROOT=$GOROOT" >> ${HOME}/.profile.d/go.sh
  echo "export GOBIN=$GOBIN" >> ${HOME}/.profile.d/go.sh
  echo 'export PATH=$PATH:$GOROOT/bin' >> ${HOME}/.profile.d/go.sh
  echo 'export PATH=$PATH:$GOBIN' >> ${HOME}/.profile.d/go.sh
  echo 'done'
fi
if [ -z "${name}" ] && [ -n "${GO_PROJECT_NAME}" ]; then
  name=$GO_PROJECT_NAME
fi
if [ -z "${name}" ]; then
  echo -e "-----> Unable to identify project name\nPlease add the full import path to \`.godir\` or set the GO_PROJECT_NAME environmental variable"
  p=$build
else
  p=$GOPATH/src/$name
  if ! [ -d $GOPATH/src/$name ]; then
    mkdir -p $(dirname $p)
    if [ -L $p ] && ! [ -e $p ]; then
      unlink $p
    fi
    if ! [ -L $p ]; then
      ln -s $build $p
    fi
  fi
fi


# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
# FLAGS=(-tags heroku)
# if [ -n "$GO_LINKER_SYMBOL" -a -n "$GO_LINKER_VALUE" ]
# then
#   FLAGS=(${FLAGS[@]} -ldflags "-X $GO_LINKER_SYMBOL $GO_LINKER_VALUE")
# fi

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
if test -e $build/Godeps
then
    FLAGS=(-v)
    echo "-----> Running: godep go install ${FLAGS[@]} ./..."
    godep go install "${FLAGS[@]}" ./...
else
    FLAGS=(-d -v -t)
    echo "-----> Running: go get ${FLAGS[@]} ./..."
    go get "${FLAGS[@]}" ./...
fi

# rm -rf $build/.heroku

# mkdir -p $build/.profile.d
# echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
